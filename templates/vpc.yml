---
- name: AWS Infrastructure Automation
  hosts: localhost
  gather_facts: no
  vars_files:
    - group_vars/aws_keys.yml
    - group_vars/all
  collections:
    - amazon.aws

  tasks:
    ###################################################################################################################
    # Task #1 - Create a new Virtual Private Cloud (VPC)                                                             #
    ###################################################################################################################
    - name: Create a new Virtual Private Cloud (VPC)
      amazon.aws.ec2_vpc_net:
        region: us-east-2
        name: ansibleVPC
        cidr_block: 10.10.0.0/16
        tenancy: default
        state: present
      register: ansibleVPC

    - name: Display VPC details
      debug:
        var: ansibleVPC

    ###################################################################################################################
    # Task #2 - Create an Internet Gateway                                                                           #
    ###################################################################################################################
    - name: Create an Internet Gateway and associate with the VPC
      amazon.aws.ec2_vpc_igw:
        region: us-east-2
        vpc_id: "{{ ansibleVPC.vpc.id }}"
        state: present
        tags:
          Name: ansibleIGW
      register: ansibleIGW

    - name: Display Internet Gateway details
      debug:
        var: ansibleIGW

    ###################################################################################################################
    # Task #3 - Create a public subnet                                                                               #
    ###################################################################################################################
    - name: Create a Public Subnet in the VPC
      amazon.aws.ec2_vpc_subnet:
        region: us-east-2
        vpc_id: "{{ ansibleVPC.vpc.id }}"
        cidr: 10.10.1.0/24
        map_public: yes
        state: present
        tags:
          Name: ansibleSubnet
      register: ansibleSubnet

    - name: Display Subnet details
      debug:
        var: ansibleSubnet

    ###################################################################################################################
    # Task #4 - Create a route table                                                                                 #
    ###################################################################################################################
    - name: Create a Route Table and associate with the subnet
      amazon.aws.ec2_vpc_route_table:
        region: us-east-2
        vpc_id: "{{ ansibleVPC.vpc.id }}"
        state: present
        subnets:
          - "{{ ansibleSubnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ ansibleIGW.gateway_id }}"
        tags:
          Name: ansibleRT
      register: ansibleRT

    - name: Display Route Table details
      debug:
        var: ansibleRT

    ###################################################################################################################
    # Task #5 - Create a Security Group                                                                              #
    ###################################################################################################################
    - name: Create a Security Group in the VPC
      amazon.aws.ec2_group:
        region: us-east-2
        vpc_id: "{{ ansibleVPC.vpc.id }}"
        name: ansibleSG
        description: "Security group for demo"
        state: present
        rules:
          - proto: tcp
            ports: [22, 80, 443]
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        tags:
          Name: ansibleSG
      register: ansibleSG

    - name: Display Security Group details
      debug:
        var: ansibleSG

    ###################################################################################################################
    # Task #6 - Create SSH Key                                                                                       #
    ###################################################################################################################

- name: Create AWS EC2 Key Pair from Existing Public Key
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Read the public key file
      slurp:
        src: ~/.ssh/id_ed25519.pub
      register: public_key_data

    - name: Create EC2 Key Pair using the public key
      amazon.aws.ec2_key:
        name: demo-key
        region: us-east-2
        key_material: "{{ public_key_data['content'] | b64decode }}"
      register: ec2_keypair

    - name: Display Key Pair details
      debug:
        var: ec2_keypair

    # - name: Save the private key locally
    #   copy:
    #     content: "{{ ec2_keypair.key.private_key }}"
    #     dest: "./{{ ssh_keyname }}.pem"
    #     mode: 0600
    #   when: ec2_keypair.changed

    ###################################################################################################################
    # Task #7 - Find the Latest AMI                                                                                  #
    ###################################################################################################################
    - name: Find the latest Amazon Linux 2 AMI
      amazon.aws.ec2_ami_info:
        region: us-east-2
        owners:
          - "amazon"
        filters:
          name: "amzn2-ami-hvm-*-x86_64-gp2"
          state: "available"
      register: ami_info

    - name: Set the latest AMI ID
      set_fact:
        ami_id: "{{ ami_info.images[0].image_id }}"

    - name: Output the latest AMI ID
      debug:
        msg: "The latest Amazon Linux 2 AMI ID is: {{ ami_id }}"

    